#!/usr/bin/env bash

set -e -o pipefail

if [ "$PIPELINE_DEBUG" == 1 ]; then
  pwd
  env
  trap env EXIT
  set -x
fi

export WORKSPACE

. "${ONE_PIPELINE_PATH}"/internal/pipeline/variables_config
. "${ONE_PIPELINE_PATH}"/tools/retry

cd "$WORKSPACE"

pipeline_data="${WORKSPACE}/pipeline.data"
source "$pipeline_data"

#
# start
#

INVENTORY_REPO="$(cat /config/inventory-url)"
GHE_ORG=${INVENTORY_REPO%/*}
GHE_ORG=${GHE_ORG##*/}
GHE_REPO=${INVENTORY_REPO##*/}

curl  -H "Accept: application/vnd.github.v3+json"  -H "Authorization: token $(get_env git-token)" https://github.ibm.com/api/v3/repos/${GHE_ORG}/${GHE_REPO}/releases -d "{\"tag_name\": \"$(get_env version)\",\"name\": \"$(get_env version)\",\"draft\": false,\"prerelease\": false}"

set_env ibmcloud-api "cloud.ibm.com"
. "${ONE_PIPELINE_PATH}"/internal/security-compliance/scan

. "${ONE_PIPELINE_PATH}"/internal/doi/publish_acceptance_tests

#publish_acceptance_test "$(get_env ACCEPTANCE_TESTS_TASK_NAME)" "$(get_env ACCEPTANCE_TESTS_STEP_NAME)" "com.ibm.acceptance_tests"

# collector_cd
echo "Processing 'build-image-signing' ..."
. "${ONE_PIPELINE_PATH}"/internal/evidence/collector \
  "$(get_env IMAGE_SIGNING_TASK_NAME)"               `# task_name` \
  "$(get_env IMAGE_SIGNING_STEP_NAME)"               `# step_name` \
  "sign-artifact"                                    `# stage` \
  "success"                                          `# excepted_status` \
  "$(get_env STAGE_SIGN_ARTIFACT_STATUS)"            `# actual_status` \
  "image-signing"                                    `# evidence_name` \
  "com.ibm.cloud.image_signing"                      `# evidence_type` \
  "1.0.0"                                            `# evidence_type_version` \
  "cd"                                               `# namespace` \
  ""                                                 `# artifacts`

echo "Processing 'acceptance-test' ..."
. "${ONE_PIPELINE_PATH}"/internal/evidence/collector \
  "$(get_env ACCEPTANCE_TESTS_TASK_NAME)"            `# task_name` \
  "$(get_env ACCEPTANCE_TESTS_STEP_NAME)"            `# step_name` \
  "acceptance-test"                                  `# stage` \
  "success"                                          `# excepted_status` \
  "$(get_env STAGE_ACCEPTANCE_TEST_STATUS)"          `# actual_status` \
  "acceptance-test"                                  `# evidence_name` \
  "com.ibm.acceptance_tests"                         `# evidence_type` \
  "1.0.0"                                            `# evidence_type_version` \
  "cd"                                               `# namespace` \
  ""                                                 `# artifacts`

echo -e "\n"

#. "${ONE_PIPELINE_PATH}"/internal/evidence/create_summary "from-every-inventory-entry" "include_cd_evidence"

#. "${ONE_PIPELINE_PATH}"/internal/evidence/upload_summary

# collector_cd_final
. "${ONE_PIPELINE_PATH}"/internal/evidence/upload_pipeline_data

printf "\n\nCollect and upload pipeline logs\n\n" >&2
upload_pipeline_task_logs "cd"

printf "\n\nCollect and upload pipeline run data\n\n" >&2
upload_pipeline_run_data "cd"

echo -e "\n"

"${ONE_PIPELINE_PATH}/internal/slack/generate_cd_end_message.py" | "${ONE_PIPELINE_PATH}/internal/slack/post_message.py" || true

#. "${ONE_PIPELINE_PATH}"/internal/pipeline/evaluator_cd
